// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  templates     Project[]
  files         File[]
  apiKeys       ApiKey[]
  renders       Render[]
}

model ApiKey {
  hash      String   @id @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Project {
  id          String    @id @default(cuid())
  name        String    @default("")
  description String    @default("")
  preview     String?
  template    Json
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  public      Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  renders     Render[]
  cloneOfId   String?
  cloneOf     Project?  @relation("Clone", fields: [cloneOfId], references: [id])
  clones      Project[] @relation("Clone")
}

enum FileType {
  IMAGE
  VIDEO
  AUDIO
  GIF
}

model File {
  id            String         @id @default(cuid())
  url           String         @default("")
  type          FileType
  name          String         @default("")
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?      @updatedAt
  userId        String
  user          User           @relation(fields: [userId], references: [id])
  transcription Transcription?
}

enum TranscriptionStatus {
  PROCESSING
  COMPLETED
  FAILED
}

model Transcription {
  id         String              @id @default(cuid())
  transcript Json?
  text       String?
  persons    Int?
  language   String?
  status     TranscriptionStatus
  createdAt  DateTime?           @default(now())
  updatedAt  DateTime?           @updatedAt
  fileId     String              @unique
  file       File                @relation(fields: [fileId], references: [id])
}

enum RenderStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum RenderType {
  MEDIA
  STILL
}

model Render {
  id        String       @id @default(cuid())
  fileUrl   String?
  status    RenderStatus @default(PROCESSING)
  progress  Float        @default(0)
  cost      Float        @default(0)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  type      RenderType
  userId    String?
  user      User?        @relation(fields: [userId], references: [id])
  projectId String?
  project   Project?     @relation(fields: [projectId], references: [id])
}
