// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  templates     Template[]
  files         File[]
  apiKeys       ApiKey[]
}

model ApiKey {
  key       String   @id @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}

model Template {
  id          String    @id @default(cuid())
  name        String    @default("")
  description String    @default("")
  width       Int
  height      Int
  duration    Int
  background  String?
  preview     String?
  fps         Int
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  public      Boolean   @default(false)
  comps       String
  inputs      String?
  userId      String
  user        User      @relation(fields: [userId], references: [id])
}

enum FileType {
  IMAGE
  VIDEO
  AUDIO
  OTHER
}

model File {
  id        String    @id @default(cuid())
  url       String
  type      FileType
  name      String    @default("")
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id])
}
